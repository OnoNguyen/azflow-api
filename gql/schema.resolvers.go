package gql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"azflow-api/azure/auth"
	"azflow-api/domain/story"
	"azflow-api/gql/model"
	"azflow-api/openai"
	"context"
)

// SignUp is the resolver for the signUp field.
func (r *mutationResolver) SignUp(ctx context.Context, input *model.SignupInput) (int, error) {
	member, err := auth.GetMember(ctx)

	if err != nil {
		return 0, err
	}

	return member.Signup()
}

// CreateAudio is the resolver for the createAudio field.
func (r *mutationResolver) CreateAudio(ctx context.Context, input model.AudioInput) (string, error) {
	member, err := auth.GetMember(ctx)
	if err != nil {
		return "", err
	}

	return story.CreateAudio(member.Email, member.ExtId, input.Text, input.Voice, input.Title)
}

// EditAudio is the resolver for the editAudio field.
func (r *mutationResolver) EditAudio(ctx context.Context, input model.EditAudioInput) (string, error) {
	_, err := auth.GetMember(ctx)
	if err != nil {
		return "", err
	}

	return story.EditAudio(input.ID, input.Title)
}

// CreateBookSummary is the resolver for the createBookSummary field.
func (r *mutationResolver) CreateBookSummary(ctx context.Context, input *model.BookInput) (string, error) {
	_, err := auth.GetMember(ctx)
	if err != nil {
		return "", err
	}
	return story.CreateBookSummary(input.Title)
}

// TrackURL is the resolver for the trackUrl field.
func (r *queryResolver) TrackURL(ctx context.Context) (string, error) {
	return openai.GetTrack(), nil
}

// GetAudios is the resolver for the getAudios field.
func (r *queryResolver) GetAudios(ctx context.Context) ([]*model.Audio, error) {
	member, _ := auth.GetMember(ctx)
	email := ""
	if member != nil {
		email = member.Email
	}

	as, err := story.GetAudios(email)

	if err != nil {
		return nil, err
	}

	audios := make([]*model.Audio, 0, len(as))
	for _, a := range as {
		b := model.Audio{Title: a.Name, URL: a.Url, ID: a.Id}
		audios = append(audios, &b)
	}

	return audios, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
