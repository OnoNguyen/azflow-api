package gql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"azflow-api/azure/auth"
	"azflow-api/domain/story"
	"azflow-api/gql/model"
	"context"
	"fmt"
	"math/rand"
	"time"
)

// SignUp is the resolver for the signUp field.
func (r *mutationResolver) SignUp(ctx context.Context, input *model.SignupInput) (int, error) {
	member, err := auth.GetMember(ctx)

	if err != nil {
		return 0, err
	}

	return member.Signup()
}

// CreateAudio is the resolver for the createAudio field.
func (r *mutationResolver) CreateAudio(ctx context.Context, input model.AudioInput) (*model.Audio, error) {
	member, err := auth.GetMember(ctx)
	if err != nil {
		return nil, err
	}

	return story.CreateAudio(member.Email, member.ExtId, input.Text, input.Voice, input.Title)
}

// EditAudio is the resolver for the editAudio field.
func (r *mutationResolver) EditAudio(ctx context.Context, input model.EditAudioInput) (*model.Audio, error) {
	_, err := auth.GetMember(ctx)
	if err != nil {
		return nil, err
	}

	return story.EditAudio(input.ID, input.Title, input.Transcript)
}

// CreateBookSummary is the resolver for the createBookSummary field.
func (r *mutationResolver) CreateBookSummary(ctx context.Context, input *model.BookInput) (string, error) {
	_, err := auth.GetMember(ctx)
	if err != nil {
		return "", err
	}
	return story.CreateBookSummary(input.Title)
}

// CreateShortURL is the resolver for the createShortURL field.
func (r *mutationResolver) CreateShortURL(ctx context.Context, longURL string) (*model.ShortURL, error) {
	id := generateID()
	shortURL := fmt.Sprintf("https://azflow.io/s/%s", id)

	shortLink := &model.ShortURL{
		ID:       id,
		LongURL:  longURL,
		ShortURL: shortURL,
	}

	ShortURLs[id] = shortLink

	return shortLink, nil
}

// GenerateImage is the resolver for the generateImage field.
func (r *mutationResolver) GenerateImage(ctx context.Context, input model.ImagePromptInput) (string, error) {
	return story.GenerateImage(input.Prompt)
}

// CreateVideoPreview is the resolver for the createVideoPreview field.
func (r *mutationResolver) CreateVideoPreview(ctx context.Context, input model.CreateVideoPreviewInput) (string, error) {
	return story.CreateVideoPreview(input.Images, input.ContentTrunks)
}

// GetAudios is the resolver for the getAudios field.
func (r *queryResolver) GetAudios(ctx context.Context) ([]*model.Audio, error) {
	as, err := story.GetAudios("")

	if err != nil {
		return nil, err
	}

	audios := make([]*model.Audio, 0, len(as))
	for _, a := range as {
		b := model.Audio{Title: a.Title, URL: a.Url, ID: a.Id, TranscriptURL: a.TranscriptUrl}
		audios = append(audios, &b)
	}

	return audios, nil
}

// GetAudio is the resolver for the getAudio field.
func (r *queryResolver) GetAudio(ctx context.Context, id *int) (*model.Audio, error) {
	member, _ := auth.GetMember(ctx)

	if member == nil {
		return nil, fmt.Errorf("unauthenticated")
	}

	a, err := story.GetAudio(*id)

	if err != nil {
		return nil, err
	}

	return &model.Audio{Title: a.Title, URL: a.Url, ID: a.Id, TranscriptURL: a.TranscriptUrl}, nil
}

// GetAudiosForMember is the resolver for the getAudiosForMember field.
func (r *queryResolver) GetAudiosForMember(ctx context.Context) ([]*model.Audio, error) {
	member, _ := auth.GetMember(ctx)

	if member == nil {
		return nil, fmt.Errorf("unauthenticated")
	}

	as, err := story.GetAudios(member.Email)

	if err != nil {
		return nil, err
	}

	audios := make([]*model.Audio, 0, len(as))
	for _, a := range as {
		b := model.Audio{Title: a.Title, URL: a.Url, ID: a.Id, TranscriptURL: a.TranscriptUrl}
		audios = append(audios, &b)
	}

	return audios, nil
}

// GetShortURL is the resolver for the getShortURL field.
func (r *queryResolver) GetShortURL(ctx context.Context, id string) (*model.ShortURL, error) {
	if link, ok := ShortURLs[id]; ok {
		return link, nil
	}
	return nil, fmt.Errorf("short link not found")
}

// GetLongURL is the resolver for the getLongURL field.
func (r *queryResolver) GetLongURL(ctx context.Context, shortURL string) (string, error) {
	for _, link := range ShortURLs {
		if link.ShortURL == shortURL {
			return link.LongURL, nil
		}
	}
	return "", fmt.Errorf("URL not found")
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func generateID() string {
	rand.Seed(time.Now().UnixNano())
	letters := []rune("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789")
	b := make([]rune, 8)
	for i := range b {
		b[i] = letters[rand.Intn(len(letters))]
	}
	return string(b)
}

var ShortURLs = make(map[string]*model.ShortURL)
