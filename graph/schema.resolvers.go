package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"azflow-api/domain/auth"
	"azflow-api/domain/links"
	"azflow-api/domain/story"
	"azflow-api/domain/users"
	"azflow-api/graph/model"
	"azflow-api/openai"
	"azflow-api/pkg/jwt"
	"context"
	"fmt"
	"strconv"
)

// CreateLink is the resolver for the createLink field.
func (r *mutationResolver) CreateLink(ctx context.Context, input model.NewLink) (*model.Link, error) {
	user := auth.ForContext(ctx)
	if user == nil {
		return &model.Link{}, fmt.Errorf("access denied")
	}

	var link links.Link
	link.Title = input.Title
	link.Address = input.Address
	link.User = user
	linkID := link.Save()
	graphqlUser := &model.User{ID: user.ID, Name: user.Username}
	return &model.Link{ID: strconv.FormatInt(linkID, 10), Title: link.Title, Address: link.Address, User: graphqlUser}, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (string, error) {
	var user users.User
	user.Username = input.Username
	user.Password = input.Password
	id, err := user.Create()
	print("user created with id: ", *id)
	if err != nil {
		return "", err
	}
	token, err := jwt.GenerateToken(user.Username)
	return token, err
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.Login) (string, error) {
	var user users.User
	user.Username = input.Username
	user.Password = input.Password
	correct, err := user.Authenticate()
	if err != nil {
		return "", err
	}
	if !correct {
		return "", &users.WrongUsernameOrPasswordError{}
	}
	return jwt.GenerateToken(user.Username)
}

// RefreshToken is the resolver for the refreshToken field.
func (r *mutationResolver) RefreshToken(ctx context.Context, input model.RefreshTokenInput) (string, error) {
	username, err := jwt.ParseToken(input.Token)
	if err != nil {
		return "", fmt.Errorf("access denied")
	}
	token, err := jwt.GenerateToken(username)
	if err != nil {
		return "", err
	}
	return token, nil
}

// CreateAudio is the resolver for the createAudio field.
func (r *mutationResolver) CreateAudio(ctx context.Context, input model.AudioInput) (string, error) {
	return story.CreateAudio(input.UserID, input.Text, input.Voice)
}

// AudioUrls is the resolver for the audioUrls field.
func (r *mutationResolver) AudioUrls(ctx context.Context, input model.AudioUrlsInput) ([]string, error) {
	//user := auth.ForContext(ctx)
	//if user == nil {
	//	return nil, fmt.Errorf("access denied")
	//}

	urls, err := story.GetAudioUrls(input.UserID)
	if err != nil {
		fmt.Println("Error getting track urls:", err)
	}

	return urls, err
}

// Links is the resolver for the links field.
func (r *queryResolver) Links(ctx context.Context) ([]*model.Link, error) {
	var resultLinks []*model.Link
	var dbLinks []links.Link
	dbLinks = links.GetAll()
	for _, link := range dbLinks {
		graphqlUser := &model.User{ID: link.User.ID, Name: link.User.Username}
		resultLinks = append(resultLinks, &model.Link{ID: link.ID, Title: link.Title, Address: link.Address, User: graphqlUser})
	}
	return resultLinks, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	var res []*model.User
	usrs, err := users.GetAll()
	if err != nil {
		return nil, err
	}
	for _, u := range usrs {
		res = append(res, &model.User{ID: u.ID, Name: u.Username})
	}
	return res, nil
}

// TrackURL is the resolver for the trackUrl field.
func (r *queryResolver) TrackURL(ctx context.Context) (string, error) {
	return openai.GetTrack(), nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
