trigger:
  - main

variables:
  # Container registry details
  acrName: azflow
  imageName: azflow-api
  tag: $(Build.BuildId)

  # Azure Resource Manager details
  subscriptionId: '05f2113e-370b-4489-ae25-7d9e721459fc'
  resourceGroupName: 'azflow_group'
  clusterName: 'azflow'

  GOBIN: '$(GOPATH)/bin' # Go binaries path
  GOROOT: '/usr/local/go1.20' # Go installation path
  GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
  modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code

stages:
  - stage: Build
    jobs:
      - job: Build
        pool:
          vmImage: 'ubuntu-latest'
        steps:
        - task: GoTool@0
          inputs:
            version: '1.20'
          displayName: 'Use Go 1.20'
        
        - task: Cache@2
          inputs:
            key: 'go | "$(Agent.OS)" | go.sum'
            restoreKeys: |
              go | "$(Agent.OS)"
            path: $(GOPATH)/pkg/mod
          displayName: 'Restore Go Modules Cache'

        - script: |
            go mod download
          displayName: 'Download dependencies (and cache)'

        - script: |
            go build
          displayName: 'Build Go Project'

        - task: Cache@2
          inputs:
            key: 'go | "$(Agent.OS)" | go.sum'
            path: $(GOPATH)/pkg/mod
          displayName: 'Save Go Modules Cache'

        - task: ArchiveFiles@2
          displayName: 'Archive files'
          inputs:
            rootFolderOrFile: '$(Build.Repository.LocalPath)'
            includeRootFolder: False

        - task: PublishBuildArtifacts@1
          displayName: 'Publish artifact'
          condition: succeededOrFailed()

        - task: DockerCompose@1
          inputs:
            containerregistrytype: 'Azure Container Registry'
            azureSubscription: 'azflow-resource-manager'
            azureContainerRegistry: '{"loginServer":"azflow.azurecr.io", "id" : "/subscriptions/05f2113e-370b-4489-ae25-7d9e721459fc/resourceGroups/azflow_group/providers/Microsoft.ContainerRegistry/registries/azflow"}'
            dockerComposeFile: '**/Dockerfile'
            action: 'Run a Docker Compose command'
            dockerComposeCommand: 'rm --all'

  - stage: Deploy
    jobs:
      - deployment: Deploy
        environment: 'aks'
        pool:
          vmImage: 'ubuntu-latest'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: Kubernetes@1
                  inputs:
                    connectionType: 'Azure Resource Manager'
                    azureSubscription: '$(subscriptionId)'
                    azureResourceGroup: '$(resourceGroupName)'
                    kubernetesCluster: '$(clusterName)'
                    namespace: 'default'
                    command: 'apply'
                    useConfigurationFile: true
                    configuration: '$(Pipeline.Workspace)/deployment.yml'
                    secretType: 'dockerRegistry'
                    containerRegistryType: 'Azure Container Registry'
                    azureContainerRegistry: '$(acrName).azurecr.io'
                    secretName: 'acr-auth'
