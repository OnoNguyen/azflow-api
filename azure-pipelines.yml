trigger:
  - main

variables:
  # Container registry details
  tag: $(Build.BuildId)

  GOBIN: '$(GOPATH)/bin' # Go binaries path
  GOROOT: '/usr/local/go1.20' # Go installation path
  GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
  modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code

stages:
  - stage: Build
    jobs:
      - job: Build

        pool:
          vmImage: 'ubuntu-latest'
        steps:
        - task: GoTool@0
          inputs:
            version: '1.20'
          displayName: 'Use Go 1.20'
        
        - task: Cache@2
          inputs:
            key: 'go | "$(Agent.OS)" | go.sum'
            restoreKeys: |
              go | "$(Agent.OS)"
            path: $(GOPATH)/pkg/mod
          displayName: 'Restore Go Modules Cache'

        - script: |
            go mod download
          displayName: 'Download dependencies (and cache)'

        - script: |
            go build -o $(Build.SourcesDirectory)/azflow-api
          displayName: 'Build Go Project'

#        - task: Cache@2
#          inputs:
#            key: 'go | "$(Agent.OS)" | go.sum | v1' # Update the key to force a fresh cache
#            path: $(GOPATH)/pkg/mod
#          displayName: 'Save Go Modules Cache'

        - task: ArchiveFiles@2
          displayName: 'Archive files'
          inputs:
            rootFolderOrFile: '$(Build.Repository.LocalPath)'
            includeRootFolder: False

        - task: Docker@2
          inputs:
            containerRegistry: 'dev-azflowACR'
            repository: 'devazflowcr.azurecr.io/azflow-api'
            command: 'buildAndPush'
            Dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
            buildContext: '$(Build.SourcesDirectory)'
            tags: '$(tag)'

        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: '$(Build.SourcesDirectory)/deployment.yml'
            artifact: 'deployment-yml'
          displayName: 'Publish deployment.yml'

  - stage: Deploy
    jobs:
      - deployment: Deploy
        environment: 'aks'
        pool:
          vmImage: 'ubuntu-latest'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadPipelineArtifact@2
                  inputs:
                    artifactName: 'deployment-yml'
                    targetPath: '$(Pipeline.Workspace)'
                  displayName: 'Download deployment.yml'

                - task: Kubernetes@1
                  inputs:
                    connectionType: 'Kubernetes Service Connection'
                    kubernetesServiceEndpoint: 'dev-azflowKS'
                    namespace: 'default'
                    command: 'apply'
                    useConfigurationFile: true
                    configuration: '$(Pipeline.Workspace)/deployment.yml'
                    secretType: 'dockerRegistry'
                    containerRegistryType: 'Container Registry'
                    dockerRegistryEndpoint: 'dev-azflowACR'
                    secretName: 'acr-auth'
