trigger:
  - main

variables:
  # Container registry details
  tag: $(Build.BuildId)

  GOBIN: '$(GOPATH)/bin' # Go binaries path
  GOROOT: '/usr/local/go1.20' # Go installation path
  GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
  modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code

stages:
  - stage: Build
    jobs:
      - job: Build

        pool:
          vmImage: 'ubuntu-latest'
        steps:
        - task: GoTool@0
          inputs:
            version: '1.23'
          displayName: 'Use Go 1.23'
        
        - task: Cache@2
          inputs:
            key: 'go | "$(Agent.OS)" | go.sum'
            restoreKeys: |
              go | "$(Agent.OS)"
            path: $(GOPATH)/pkg/mod
          displayName: 'Restore Go Modules Cache'

        - script: |
            go mod download
          displayName: 'Download dependencies (and cache)'

        - script: |
            CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o $(Build.SourcesDirectory)/azflow-api
          displayName: 'Build Go Project'

#        - task: Cache@2
#          inputs:
#            key: 'go | "$(Agent.OS)" | go.sum | v1' # Update the key to force a fresh cache
#            path: $(GOPATH)/pkg/mod
#          displayName: 'Save Go Modules Cache'

#        - task: ArchiveFiles@2
#          displayName: 'Archive files'
#          inputs:
#            rootFolderOrFile: '$(Build.Repository.LocalPath)'
#            includeRootFolder: False

        - task: Docker@2
          inputs:
            containerRegistry: 'azflowcrmvp'
            repository: 'azflowcr.azurecr.io/azflow-api'
            command: 'buildAndPush'
            Dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
            buildContext: '$(Build.SourcesDirectory)'
            tags: 'latest,$(Build.BuildId)'

        - script: |
            mkdir -p ~/.ssh
            ssh-keyscan -H 20.11.243.20 >> ~/.ssh/known_hosts
            chmod 600 $(Build.SourcesDirectory)/azflowmvp_key.pem
            ssh -i $(Build.SourcesDirectory)/azflowmvp_key.pem azureuser@20.11.243.20<< 'EOF'
              docker pull azflowcr.azurecr.io/azflowcr.azurecr.io/azflow-api:latest
              docker stop azflow-api
              docker rm azflow-api
              docker run -d --name azflow-api --network azflow-network -p 8080:8080 azflowcr.azurecr.io/azflowcr.azurecr.io/azflow-api:latest
            EOF
          displayName: 'Deploy to MVP VM'

#        - task: PublishPipelineArtifact@1
#          inputs:
#            targetPath: '$(Build.SourcesDirectory)/deployment.yml'
#            artifact: 'deployment-yml'
#          displayName: 'Publish deployment.yml'

#  - stage: Deploy
#    jobs:
#      - deployment: Deploy
#        environment: 'aks'
#        pool:
#          vmImage: 'ubuntu-latest'
#        strategy:
#          runOnce:
#            deploy:
#              steps:
#                - task: DownloadPipelineArtifact@2
#                  inputs:
#                    artifactName: 'deployment-yml'
#                    targetPath: '$(Pipeline.Workspace)'
#                  displayName: 'Download deployment.yml'
#
#                - task: Kubernetes@1
#                  inputs:
#                    connectionType: 'Kubernetes Service Connection'
#                    kubernetesServiceEndpoint: 'dev-azflowKS'
#                    namespace: 'default'
#                    command: 'apply'
#                    useConfigurationFile: true
#                    configuration: '$(Pipeline.Workspace)/deployment.yml'
#                    secretType: 'dockerRegistry'
#                    containerRegistryType: 'Container Registry'
#                    dockerRegistryEndpoint: 'azflowcrmvp'
#                    secretName: 'acr-auth'
